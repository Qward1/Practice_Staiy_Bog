import requests
from bs4 import BeautifulSoup
import sqlite3
import time
from tqdm import tqdm

CLIENT_ID = "OLSCPBIR884U8BK0QBI2QL5BUG32STAREP6SRK59H9VH78LDBU92I31PB8NNQ287"
CLIENT_SECRET = "KQ2GQ8IH9MN18NHP3DP2TAG0HG2UG46THOQ4DIQ0I6JB7G7D65QRJ2DSU76D80KA"
REDIRECT_URI = "https://example.com/page"
USER_AGENT = "ForPractica (45bgkxzwt2@privaterelay.appleid.com)"


#  –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
def get_access_token():

    auth_url = (
        f"https://hh.ru/oauth/authorize?"
        f"response_type=code&"
        f"client_id={CLIENT_ID}&"
        f"redirect_uri={REDIRECT_URI}"
    )
    print(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å:\n{auth_url}")
    code = input("–í–≤–µ–¥–∏—Ç–µ code –∏–∑ URL –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ")

    # –¥–ª—è access token –¥–∞–Ω–Ω—ã–µ
    token_url = "https://hh.ru/oauth/token"
    data = {
        "grant_type": "authorization_code",
        "client_id": CLIENT_ID,
        "client_secret": CLIENT_SECRET,
        "code": code,
        "redirect_uri": REDIRECT_URI
    }

    response = requests.post(token_url, data=data)
    if response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")

    return response.json()["access_token"]

# —Ç—É—Ç –º—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º html —Ç–µ–≥–∏ —á—Ç–æ–±—ã –ø–æ—Ç–æ–º –∑–∞–∫–∏–Ω—É—Ç—å –≤ –∫–ª–∞—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ—Ä–º–∞–ª—å–Ω–æ
def remove_html_tags(html_text):
    if not html_text:
        return ""

    soup = BeautifulSoup(html_text, 'html.parser')
    return soup.get_text(separator=' ', strip=True)

#  –ø–∞—Ä—Å–∏–Ω–≥
def fetch_vacancies(access_token, pages=5):
    base_url = "https://api.hh.ru/vacancies"
    headers = {"Authorization": f"Bearer {access_token}"}
    all_vacancies = []
    total_found = 0
    max_api_limit = 2000

    initial_response = requests.get(base_url, headers=headers, params={
        "text": "Python",
        "per_page": 1,
        "page": 0
    })
    # –∫–∞—Ä–æ—á–µ –∏–∑ JSON –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ , —Ç–∏–ø–æ –≤–±–∏–≤–∞–µ—à—å –≤ —Ç–µ–∫—Å—Ç –∏ –æ–Ω–æ –∏—â–µ—Ç –ø–æ —ç—Ç–∏–º —Å–ª–æ–≤–∞–º

    if initial_response.status_code != 200:
        raise Exception(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {initial_response.text}")

    initial_data = initial_response.json()
    total_found = initial_data.get("found", 0)

    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ API –ª–∏–º–∏—Ç—É
    pages_needed = 99
    if total_found > max_api_limit:
        print(f"\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: API HH.ru –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ {max_api_limit} –≤–∞–∫–∞–Ω—Å–∏–π")
        total_found = max_api_limit

    # –±–∞—Ä –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
    with tqdm(total=pages_needed, desc="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü", unit="page") as pbar:
        for page in range(pages_needed):
            time.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏

            response = requests.get(base_url, headers=headers, params={
                "text": "Python",
                "per_page": 100,
                "page": page
            })

            if response.status_code != 200:
                print(f"\n‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {response.text}")
                break

            data = response.json()
            all_vacancies.extend(data.get("items", []))
            pbar.update(1)

            # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
            if len(all_vacancies) >= total_found:
                break

    return {"items": all_vacancies[:total_found], "found": total_found}

def save_vacancy(conn, link, description):
     cursor = conn.cursor()
     cursor.execute('''
         INSERT INTO vacancies (link, description)
         VALUES (?, ?)
     ''', (link, description))
     conn.commit()






if __name__ == "__main__":
    try:

        conn = sqlite3.connect('../database/db_for_vacancies.sqlite3')
        # –ø–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        access_token = get_access_token()
        print("\nüîë –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")

        base_url = "https://api.hh.ru/vacancies"
        headers = {"Authorization": f"Bearer {access_token}"}
        print("–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è!")

        # –ø–æ–ª—É—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏
        vacancies_data = fetch_vacancies(access_token)




        # —á—Ç–æ —Ç–æ –∑–∞–∫–æ–º–µ–Ω—Ç–ø—Ä–æ–≤–∞–Ω–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–∑ –ø–æ—á–µ–º—É –Ω–æ –≤—ã–¥–æ–≤–∞–ª–æ –æ—à–∏–±–∫—É
        print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {vacancies_data['found']}")
        print(f"üíæ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π: {len(vacancies_data['items'])}")

        with tqdm(vacancies_data["items"], desc="üì• –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π", unit="vac") as pbar:
            for idx, vacancy in enumerate(pbar):
                if idx > 0 and idx % 10 == 0:
                    time.sleep(2)
                print("\n" + "=" * 50)
                print(f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {vacancy['name']}")
                print(f"–ö–æ–º–ø–∞–Ω–∏—è: {vacancy['employer']['name']}")
         #      print(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {vacancy['salary']['from']} - {vacancy['salary']['to']} {vacancy['salary']['currency']}")
                print(f"–°—Å—ã–ª–∫–∞: {vacancy['alternate_url']}")
        #       print(f"–°—Å—ã–ª–∫–∞: {vacancy['snippet']}")


                vacancy_id = vacancy["id"]
                full_vacancy = requests.get(f"{base_url}/{vacancy_id}", headers=headers).json()

                # —Ç—É—Ç –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ—Ç–æ–º—É —á—Ç–æ vacancy['snippet'] –æ–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç
                full_description = full_vacancy.get("description", "")
                clean_text = remove_html_tags(full_description)
                print(f"–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ {vacancy_id}:\n{clean_text}\n")

                save_vacancy(conn, vacancy['alternate_url'], clean_text)

    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")